#ifndef IFT_MIMAGE_H_
#define IFT_MIMAGE_H_

#ifdef __cplusplus
extern "C" {
#endif

#include "iftCommon.h"
#include "iftImage.h"
#include "iftFImage.h"
#include "iftColor.h"
#include "iftAdjacency.h"


#define iftMGetXCoord(s,p) (((p) % (((s)->xsize)*((s)->ysize))) % (s)->xsize)
#define iftMGetYCoord(s,p) (((p) % (((s)->xsize)*((s)->ysize))) / (s)->xsize)
#define iftMGetZCoord(s,p) ((p) / (((s)->xsize)*((s)->ysize)))
#define iftMGetVoxelIndex(s,v) ((v.x)+(s)->tby[(v.y)]+(s)->tbz[(v.z)])
#define iftMDiagonalSize(s) (iftRound(sqrtf(s->xsize*s->xsize + s->ysize*s->ysize + s->zsize*s->zsize)))

/* Multiband image: iftMImage *img; img->band[b].val[p]  */

//! swig(extend = iftMImageExt.i, destroyer = iftDestroyMImage)
typedef struct ift_mimage {
  iftBand *band; /* a list of images, one for each band */
  int      xsize,ysize,zsize; /* image dimensions of each band */
  float    dx,dy,dz;  /* voxel size */
  int     *tby, *tbz; /* LUT to speed up index to/from coordinate conversions */
  int      n,m; /* number of voxels and number of bands */
} iftMImage;

  int         iftMXSize(iftMImage *img);
  int         iftMYSize(iftMImage *img);
  int         iftMZSize(iftMImage *img);
  iftVoxel    iftMGetVoxelCoord(const iftMImage *img, int p);
  iftMImage  *iftCreateMImage(int xsize,int ysize,int zsize, int nbands);
  void        iftDestroyMImage(iftMImage **img);
  iftMImage  *iftCopyMImage(iftMImage *img);
char iftMValidVoxel(const iftMImage *img, iftVoxel v);
  void        iftMCopyVoxelSize(iftMImage *img1, iftMImage *img2);
/**
 * @brief Copies the voxel size from an iftImage to an iftMImage
 *
 * @author Thiago Vallin Spina
 *
 * @param img1 An iftImage.
 * @param img2 An iftMImage.
 */
void        iftMCopyVoxelSizeFromImage(iftImage *img1, iftMImage *img2);
/**
 * @brief Copies the voxel size from an iftMImage to an iftImage
 *
 * @author Thiago Vallin Spina
 *
 * @param img1 An iftMImage.
 * @param img2 An iftImage.
 */
void        iftMCopyVoxelSizeToImage(iftMImage *img1, iftImage *img2);

//! swig(newobject)
iftMImage  *iftImageToMImage(const iftImage *img, char color_space); /* See options for color_space in iftColor.h */
iftImage   *iftMImageToImage(iftMImage *img, int Imax, int band);


static inline bool iftIs3DMImage(const iftMImage *img) {
    return (img->zsize > 1);
}


  iftMImage   *iftReadMImage(const char *filename);
  void  	     iftWriteMImage(iftMImage *mimg, const char *filename);
  void        iftWriteMImageBands(iftMImage *mimg, char *base_filename);

  iftMImage  *iftMAddFrame(iftMImage *img, int bx, int by, int bz, float value);
  iftMImage  *iftMRemFrame(iftMImage *fimg, int bx, int by, int bz);
  void        iftSetMImage(iftMImage *img, float value);
  iftImage   *iftEuclMImageBasins(iftMImage *img, iftAdjRel *A);

//! swig(newobject)
  iftImage   *iftMImageBasins(iftMImage *img, iftAdjRel *A);
  iftImage   *iftBorderProbImage(iftMImage *img);
  iftImage   *iftRegionProbImage(iftMImage *img);
  iftImage   *iftUniformProbImage(iftMImage *img);
  void        iftMultMImageByScalar(iftMImage *Z, float scalar);

  iftMImage  *iftGradientVector(iftImage *img, iftImage *mask, iftAdjRel *A);

  /* Voxel sampling methods that return a binary image with 0/1 value,
     by using the border information to avoid outliers. */

  iftImage *iftSelectNonBorderVoxels(iftMImage *img, iftImage *mask, int nsamples);

/**
 * @brief Does a grid sampling in the multi-image
 * @param img A multi-image
 * @param mask The mask that defines the region in img to be sampled
 * @param nsamples Desired number of samples
 * @return A mask image with the selected samples
 *
 */
  iftImage *iftGridSampling(iftMImage *img, iftImage *mask, int nsamples);

  iftImage *iftAltMixedSampling(iftMImage *img, iftImage *mask, int nsamples);

  iftImage *iftSelectNSamplesFromMask(iftMImage *img, iftImage *mask1, int nsamples);

  // If band is negative then the function will search for the maximum value among all bands
  float iftMMaximumValue(iftMImage *img, int band);
  // If band is negative then the function will search for the minimum value among all bands
  float iftMMinimumValue(iftMImage *img, int band);

  /**
  * @brief Computes an iftImageTiles record given a multidimensional image and a number of tiles for each image dimension.
  *
  * The dimensions of the image tiles are equally sized to approximately divide the image into regular patches.
  * In practice, this function uses iftComputeBoundingBoxImageTiles with the entire image as a bounding box.
  *
  * @author Thiago V. Spina
  * @date Feb 26, 2015
  *
  * @param mimg    A multidimensional image that must be tiled..
  * @param ntiles_x The number of tiles in the X axis.
  * @param ntiles_y The number of tiles in the Y axis.
  * @param ntiles_z The number of tiles in the Z axis.
  * @return The allocated record.
  *
  * @warning The number of tiles may actually be less than ntiles_x*ntiles_y*ntiles_z since we prioritize the fact that
  * the patches must have approximately the same size. REFER TO tiles->ntiles_x/y/z when accessing the actual number of
  * computed tiles.
  *
  * @sa iftBoundingBoxImageTilesByEquallyDividingAxes
  */
  iftImageTiles *iftMImageTilesByEquallyDividingAxes(const iftMImage *mimg, int ntiles_x, int ntiles_y, int ntiles_z);


/**
 * @brief Extends a MImage with only one band with its Local Binary Pattern (LPB)
 */
iftMImage *iftExtendMImageByLBP(iftMImage *img, iftAdjRel *A, char normalize);

  /**
  * @brief Extends a multi-dimensional image with the color information of adjacent pixels and their own spatial coordinates.
  * @author Adan Echemendia
  * @date Nov 20, 2016
  * @param img The input multi-band image.
  * @param A The adjacency relation.
  * @param normalize_voxel_coord A flag indicating whether or not the voxel coordinates must be normalized before
   * adding them
  * @return A extended multidimensional image.
  *
  */
iftMImage *iftExtendMImageByAdjacencyAndVoxelCoord(const iftMImage *mimg, const iftAdjRel *A, char normalize_voxel_coord);

/**
 * @brief Extends a multi-dimensional image with the color information of adjacent pixels
 *
 * @author Adan Echemendia
 * @date Nov 20, 2016
 *
 * @param img The input multi-band image.
 * @param A The adjacency relation
 * @return A extended multidimensional image.
 *
 */
iftMImage *iftExtendMImageByAdjacency(iftMImage *mimg, iftAdjRel *A);

/**
 * @brief Creates a label image where each pixel has the value of the corresponding tile in a <b>n_tiles</b> tile division
 * @author Adan Echemendia
 */
iftImage *iftMImageTilesToLabelImage(iftMImage *mimg, int n_tiles);


/**
 * @brief Computes the distance between 2 multi-band pixels p and q.
 * @author Samuka Martins
 * @date Oct 26, 2017
 */
float iftMImageDist(const iftMImage *mimg, int p, int q);

/**
 * @brief Computes the depth of a Multiband image.
 * @param  mimg Multiband Image.
 * @return      Image depth
 *
 * @author Cesar Castelo
 * @date Dec 20, 2017
 */
int iftMImageDepth(iftMImage *mimg);

  /**
  * @brief Extends multidimensional image by adding the voxel coordinates. The coordinates can be normalized (normalize_voxel_coord = true).
  *
  * @param mimg      An input multidimensional image to be extended with the voxel coordinates.
  * @param normalize A flag that indicates whether or not the voxel coordinates must be normalized for addition.
  * @return          The extended multidimensional image.
  *
  * @author Alexandre Falcao
  * @date Nov 10, 2016
  *
  * @lastupdate Jul 21, 2018 by Samuel Martins
  *
  */
iftMImage *iftExtendMImageByVoxelCoord(const iftMImage *mimg, const iftImage *label_img, bool normalize);


/**
 * @brief Extract image features with the option of adding color of the adjacent voxels and their coordinates.
 * 
 * @param img         Input Image.
 * @param label_img   (Optional) Label Image that indicates the voxels (values != 0) that will be
 *                    considered in the feature extraction. If NULL, all voxels are considered.
 * @param A           (Optional) Adjacency relation that defines which neighbors from the voxel will be considered for feature extraction.
 *                    If NULL, only the own voxel is considered.
 * @param voxel_coord True indicates the voxel coordinates should be added as features and false indicates otherwise.
 * @return            It returns a multiband image with the extracte image features.
 * 
 * @date July 15th, 2018
 * @author Alexandre Falcao
 * 
 * @lastupdate Jul 17, 2018 by Samuel Martins
 */
//! swig(newobject)
iftMImage *iftExtractImageFeatures(const iftImage *img, const iftImage *label_img, const iftAdjRel *A, bool voxel_coord);


#ifdef __cplusplus
}
#endif

#endif













